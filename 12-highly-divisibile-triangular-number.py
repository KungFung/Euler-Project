'''
The sequence of triangle numbers is generated by adding the natural numbers.
So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. 
The first ten terms would be:
1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:
1 : 1
3 : 1,3
6 : 1,2,3,6
10 : 1,2,5,10
15 : 1,3,5,15
21 : 1,3,7,21
28 : 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.
What is the value of the first triangle number to have over five hundred divisors?
'''

'''
Notes
Only have to find the first 250 divisors due to each divisor having a pair 
i.e for 6 you have 2,3. This is the case except for 1
'''

'''
This function works but has it flaws and is slow as shit

def foundDivisor(number):
    divisor_count = 0
    for x in range(1,number + 1):
        if number % x == 0:
            divisor_count+=1
        
        if divisor_count > over_n_diviors:
            return True
'''
            
'''
This method fucking sucks since triangular numbers are just an arithmetic sum
from 1 to n with d = 1 and a = 1

Arithmetic = n/2 (a + l) OR n/2 (a + (n+1)d)

while True:
    if foundDivisor(num):
        break
    num+=count
    count+=1 

print(num)
'''

'''
This is basically the same as the previous one so it also sucks ass
while True:
    if foundDivisor(int(num)):
        break
    num = count/2 * (1 + count)
    count += 1
'''
'''
THis is all dogshit better rethink it

import time

start_time = time.time()
num = 1
count = 2

def foundDivisor(number):
    first_non1_divisor = 0
    divisor_count = 0
    x = 2
    while True:
        if number % x == 0:
            first_non1_divisor = x
            break

    for i in range(1,number/first_non1_divisor):
        if number % i == 0:
            divisor_count+=1

    if divisor_count > 250:
        return True

# Trying the old method but optimising the find divisors function    
while True:
    if foundDivisor(num):
        break
    num+=count
    count+=1 

print(num)

end_time = time.time()

print(f"The time is {end_time-start_time}")
'''